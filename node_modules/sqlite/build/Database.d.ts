import * as sqlite3 from 'sqlite3';
import { ISqlite, IMigrate } from './interfaces';
import { Statement } from './Statement';
import MigrationParams = IMigrate.MigrationParams;
/**
 * Promisified wrapper for the sqlite3#Database interface.
 */
export declare class Database<Driver extends sqlite3.Database = sqlite3.Database, Stmt extends sqlite3.Statement = sqlite3.Statement> {
    config: ISqlite.Config;
    db: Driver;
    constructor(config: ISqlite.Config);
    /**
     * Event handler when verbose mode is enabled.
     * @see https://github.com/mapbox/node-sqlite3/wiki/Debugging
     */
    on(event: string, listener: any): void;
    /**
     * Returns the underlying sqlite3 Database instance
     */
    getDatabaseInstance(): Driver;
    /**
     * Opens the database
     */
    open(): Promise<void>;
    /**
     * Closes the database.
     */
    close(): Promise<void>;
    /**
     * @see https://github.com/mapbox/node-sqlite3/wiki/API#databaseconfigureoption-value
     */
    configure(option: ISqlite.ConfigureOption, value: any): any;
    /**
     * Runs the SQL query with the specified parameters. It does not retrieve any result data.
     * The function returns the Database object for which it was called to allow for function chaining.
     *
     * @param {